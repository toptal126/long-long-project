/**
 * @typedef {Object} ParseOptions
 * @property {boolean} [normalize=true]
 * @property {boolean} [forgiving=false]
 * @property {(reason: string, code: number, offset: number) => void} [warning]
 *
 * @typedef {Object} Extension
 * @property {string} singleton
 * @property {Array.<string>} extensions
 *
 * @typedef {Object} Schema
 * @property {string|null} language
 * @property {Array.<string>} extendedLanguageSubtags
 * @property {string|null} script
 * @property {string|null} region
 * @property {Array.<string>} variants
 * @property {Array.<Extension>} extensions
 * @property {Array.<string>} privateuse
 * @property {string|null} irregular
 * @property {string|null} regular
 */
/**
 * Parse a BCP 47 language tag.
 *
 * @param {string} tag
 * @param {ParseOptions} [options]
 * @returns {Schema}
 */
export function parse(tag: string, options?: ParseOptions): Schema
export type ParseOptions = {
  normalize?: boolean
  forgiving?: boolean
  warning?: (reason: string, code: number, offset: number) => void
}
export type Extension = {
  singleton: string
  extensions: Array<string>
}
export type Schema = {
  language: string | null
  extendedLanguageSubtags: Array<string>
  script: string | null
  region: string | null
  variants: Array<string>
  extensions: Array<Extension>
  privateuse: Array<string>
  irregular: string | null
  regular: string | null
}
